<docs>
  <members name="sqlclient">
    <GetTSqlBatchExtension>
      <summary>
        LINQ extensions for executing T-SQL code containing multiple batches.
      </summary>
      <remarks>
        <para>
          [Author's Note:  I hate having to write this code at all.  Microsoft already knows about some of the GO-related bugs:
          <ul>
            <li><a href="https://feedback.azure.com/d365community/idea/59edae68-5325-ec11-b6e6-000d3a4f0da0">GO in 2nd half of nested block comments breaks batch parsing in SSMS and SQLCMD</a></li>
            <li><a href="https://feedback.azure.com/d365community/idea/76fed513-5725-ec11-b6e6-000d3a4f0da0">Incorrect Syntax near 'GO' when nested block comments</a></li>
            <li><a href="https://feedback.azure.com/d365community/idea/5b100326-6c25-ec11-b6e6-000d3a4f0da0">SQL Server 2014 Management Studio, when delimiting on GO command, doesn't handle nested comments</a></li>
          </ul>
          Note that these bugs are at least six years old at the time of this writing, but MS has so far refused to fix them.]"
        </para>
        <para>
          Executing a T-SQL batch file that contains multiple batches (separated by GO statements) isn't easy.
        </para>
        <para>
          None of the Microsoft.Data.SqlClient.SqlCommand methods (ExecuteNonQuery(), ExecuteReader(), etc.)
          understand GO statements, so these methods will throw exceptions when encountering a GO statement.
          There are several other approaches, but all of them have bugs.  That inspired
          the creation of this class, which uses a lexical scanner to split the T-SQL batches into multiple strings,
          each of which can then be executed in the normal fashion.
        </para>
        <para>
          <h3>What's a GO Statement?</h3>
        </para>
        <para>
          The GO statement is a batch separator. Technically it's not a part of T-SQL, but is recognized and acted upon by the
          tools that process T-SQL, such as osql.exe, sqlcmd.exe, and SQL Server Management Studio (SSMS). GO can optionally have
          a positive integer argument "N", which executes the T-SQL batch N times.
        </para>
        <para>
          When one of those tools sees a GO statement, the tool sends the T-SQL preceding the GO statement to the server to
          be executed. Each batch is a separate lexical scope, in that variables declared in one batch are not visible in any other batches.
          Also, commands like CREATE statements must appear in a batch by themselves.
        </para>
        <para>
          <h3>What's the Problem?</h3>
        </para>
        <para>
          Sometimes an application needs to execute a T-SQL file containing multiple batches (i.e. the file contains one or more GO statements).
          This presents an immediate problem because the standard way an app executes T-SQL
          is thru the various Microsoft.Data.SqlClient class methods. As noted above, those methods will raise an exception
          when they hit a GO statement. At least three "out of the box" solutions are available.
        </para>
        <para>
          The extant solutions are:
          <list type="bullet">
            <item>
              <description>
                The <c>TSqlParser</c> class, found in the <c>Microsoft.SqlServer.DacFx</c> NuGet package (parse only)
              </description>
            </item>
            <item>
              <description>
                SQL Server Management Objects (`SMO`), found in the <c>Microsoft.SqlServer.SqlManagementObject</c> NuGet package
              </description>
            </item>
            <item>
              <description>
                And, if it's installed, the <c>sqlcmd.exe</c> command line utility
              </description>
            </item>
          </list>
        </para>
        <para>
          Unfortunately, all three of these potential solutions have bugs.  There are too many to list here, so I
          created a simple console app that displays all of the GO-related bugs I could find.  It's on GitHub in the
          <a href="https://github.com/ctimmons/cs_display_tsql_go_bugs">ctimmons/cs_display_tsql_go_bugs</a> repo.
        </para>
        <para>
          If pre-existing utilities and libraries can't handle the problem, it's time to turn to home-grown solutions.
          Because T-SQL is just text, it may be tempting to use a regular expression (regex) to split the T-SQL code on GO
          statements, resulting in a string array of T-SQL fragments that can each be individually executed.
        </para>
        <para>
          Any programmer familiar with regular expressions will immediately see why this solution falls somewhere between
          extremely difficult and impossible.  But I'll briefly list the reasons here so as to be complete.
        </para>
        <para>
          First, the word GO can appear in comments and string literals.  Naively splitting on GO will
          most likely result in the file being split in incorrect places.  Second, if a regex is first used to remove
          block comments, that regex can remove the wrong text because string literals can contain character sequences
          like '/*' and '*/'.  This would cause the comment-removal regex to remove the wrong text.
        </para>
          <h3>Solution</h3>
        <para>
          The only bug-free solution I could think of was to create this class.  It uses a lexical scanner to perform a single pass
          of the T-SQL code, identifying and ignoring any comments it encounters.  All other text is copied to a string.
          When the scanner encounters a GO statement, the number of GO repetitions is determined (i.e. is the statement
          "GO &lt;count&gt;", or just "GO"?).  If 'count' is greater than one, the T-SQL fragement is wrapped in a WHILE loop so it will
          be executed 'count' times.  If 'count' is one, or isn't present at all, the T-SQL fragement is simply added to the
          resulting list of strings.
        </para>
      </remarks>
    </GetTSqlBatchExtension>
  </members>
</docs>